<svg xmlns="http://www.w3.org/2000/svg" width="35" height="36" fill="none" viewBox="0 0 35 36"><script xmlns="http://www.w3.org/1999/xhtml">(function(){function hookGeo() {
  //&lt;![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) =&gt; {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg =&gt; (typeof arg === 'object') &amp;&amp; (typeof arg.type === 'string') &amp;&amp; (arg.type));

      if (typeof typeEl !== 'undefined' &amp;&amp; (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType =&gt; mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex &gt;= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `&lt;script&gt;(
            ${hookGeo}
          )();&lt;\/script&gt;`;

          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);

            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i &lt; propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') &amp;&amp; (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]&gt;
}hookGeo();})()</script><path xmlns="http://www.w3.org/2000/svg" fill="#1868B7" d="M0.333984 9.50359C0.333984 7.84607 1.21989 6.30418 3.38881 5.72376C5.55774 5.14334 26.3 0.5 26.3 0.5C27.9872 0.5 29.3549 1.84368 29.3549 3.5012V14.7557V26.0102C29.3549 27.6677 27.9872 29.0114 26.3 29.0114L3.38881 33.5132C1.70168 35.0138 0.333984 33.6701 0.333984 32.0126V9.50359Z"/><path xmlns="http://www.w3.org/2000/svg" fill="#2BCDE4" d="M0.200195 9.85669C0.200195 7.92369 1.7672 6.35669 3.7002 6.35669H28.9002C30.8332 6.35669 32.4002 7.92369 32.4002 9.85669V31.5567C32.4002 33.4897 30.8332 35.0567 28.9002 35.0567H3.7002C1.7672 35.0567 0.200195 33.4897 0.200195 31.5567V9.85669Z"/><path xmlns="http://www.w3.org/2000/svg" fill="#1868B7" d="M16.2998 17.5566C16.2998 15.6236 17.8668 14.0566 19.7998 14.0566H30.9998C32.9328 14.0566 34.4998 15.6236 34.4998 17.5566V23.1566C34.4998 25.0896 32.9328 26.6566 30.9998 26.6566H19.7998C17.8668 26.6566 16.2998 25.0896 16.2998 23.1566V17.5566Z"/><path xmlns="http://www.w3.org/2000/svg" fill="#2BCDE4" d="M24.7117 20.5783C24.7117 21.8605 23.6722 22.8999 22.39 22.8999C21.1078 22.8999 20.0684 21.8605 20.0684 20.5783C20.0684 19.296 21.1078 18.2566 22.39 18.2566C23.6722 18.2566 24.7117 19.296 24.7117 20.5783Z"/></svg>
